//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/input_control/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""9f137a1f-9f52-409d-8599-e2d87327daaf"",
            ""actions"": [
                {
                    ""name"": ""mousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""540d7d35-f3c5-4bcf-af70-8ba47dc64e5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb1fd542-54ec-43f1-961f-da362d1d770a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UnitSelection"",
            ""id"": ""108d60b0-efcf-4856-990e-52926ad4f729"",
            ""actions"": [
                {
                    ""name"": ""select"",
                    ""type"": ""Button"",
                    ""id"": ""e434f528-6276-4366-a95f-e24d186efaee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""add"",
                    ""type"": ""Button"",
                    ""id"": ""3b2c3d53-0e48-4835-96db-d3dfee14fec0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""remove"",
                    ""type"": ""Button"",
                    ""id"": ""434b7536-3a6f-473b-9805-3190c129a3bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a7e0681-dabe-4cbd-816c-b4ea014599ec"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(pressPoint=0.01,behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c60450f2-f20d-4cd7-849f-83eea5597201"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""add"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a4e6445-cd69-4ce7-ae5a-29de79f163aa"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""remove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovementSelection"",
            ""id"": ""b587f8ae-80d1-4487-b90f-99d6968a2c7e"",
            ""actions"": [
                {
                    ""name"": ""placePoint"",
                    ""type"": ""Button"",
                    ""id"": ""1242725f-34e3-49ed-869f-aed9fa9088ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cancel"",
                    ""type"": ""Button"",
                    ""id"": ""4c40d480-7ef7-4b1a-a5ea-af888e19094d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46a1de04-9694-475f-9c73-7c47d73d4dbe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(pressPoint=0.01),SlowTap(duration=0.3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""placePoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e055893-2dd5-478e-94d6-91721afba45c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_mousePosition = m_General.FindAction("mousePosition", throwIfNotFound: true);
        // UnitSelection
        m_UnitSelection = asset.FindActionMap("UnitSelection", throwIfNotFound: true);
        m_UnitSelection_select = m_UnitSelection.FindAction("select", throwIfNotFound: true);
        m_UnitSelection_add = m_UnitSelection.FindAction("add", throwIfNotFound: true);
        m_UnitSelection_remove = m_UnitSelection.FindAction("remove", throwIfNotFound: true);
        // MovementSelection
        m_MovementSelection = asset.FindActionMap("MovementSelection", throwIfNotFound: true);
        m_MovementSelection_placePoint = m_MovementSelection.FindAction("placePoint", throwIfNotFound: true);
        m_MovementSelection_cancel = m_MovementSelection.FindAction("cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private List<IGeneralActions> m_GeneralActionsCallbackInterfaces = new List<IGeneralActions>();
    private readonly InputAction m_General_mousePosition;
    public struct GeneralActions
    {
        private @InputController m_Wrapper;
        public GeneralActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @mousePosition => m_Wrapper.m_General_mousePosition;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void AddCallbacks(IGeneralActions instance)
        {
            if (instance == null || m_Wrapper.m_GeneralActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Add(instance);
            @mousePosition.started += instance.OnMousePosition;
            @mousePosition.performed += instance.OnMousePosition;
            @mousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IGeneralActions instance)
        {
            @mousePosition.started -= instance.OnMousePosition;
            @mousePosition.performed -= instance.OnMousePosition;
            @mousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGeneralActions instance)
        {
            foreach (var item in m_Wrapper.m_GeneralActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // UnitSelection
    private readonly InputActionMap m_UnitSelection;
    private List<IUnitSelectionActions> m_UnitSelectionActionsCallbackInterfaces = new List<IUnitSelectionActions>();
    private readonly InputAction m_UnitSelection_select;
    private readonly InputAction m_UnitSelection_add;
    private readonly InputAction m_UnitSelection_remove;
    public struct UnitSelectionActions
    {
        private @InputController m_Wrapper;
        public UnitSelectionActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @select => m_Wrapper.m_UnitSelection_select;
        public InputAction @add => m_Wrapper.m_UnitSelection_add;
        public InputAction @remove => m_Wrapper.m_UnitSelection_remove;
        public InputActionMap Get() { return m_Wrapper.m_UnitSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitSelectionActions set) { return set.Get(); }
        public void AddCallbacks(IUnitSelectionActions instance)
        {
            if (instance == null || m_Wrapper.m_UnitSelectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnitSelectionActionsCallbackInterfaces.Add(instance);
            @select.started += instance.OnSelect;
            @select.performed += instance.OnSelect;
            @select.canceled += instance.OnSelect;
            @add.started += instance.OnAdd;
            @add.performed += instance.OnAdd;
            @add.canceled += instance.OnAdd;
            @remove.started += instance.OnRemove;
            @remove.performed += instance.OnRemove;
            @remove.canceled += instance.OnRemove;
        }

        private void UnregisterCallbacks(IUnitSelectionActions instance)
        {
            @select.started -= instance.OnSelect;
            @select.performed -= instance.OnSelect;
            @select.canceled -= instance.OnSelect;
            @add.started -= instance.OnAdd;
            @add.performed -= instance.OnAdd;
            @add.canceled -= instance.OnAdd;
            @remove.started -= instance.OnRemove;
            @remove.performed -= instance.OnRemove;
            @remove.canceled -= instance.OnRemove;
        }

        public void RemoveCallbacks(IUnitSelectionActions instance)
        {
            if (m_Wrapper.m_UnitSelectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnitSelectionActions instance)
        {
            foreach (var item in m_Wrapper.m_UnitSelectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnitSelectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnitSelectionActions @UnitSelection => new UnitSelectionActions(this);

    // MovementSelection
    private readonly InputActionMap m_MovementSelection;
    private List<IMovementSelectionActions> m_MovementSelectionActionsCallbackInterfaces = new List<IMovementSelectionActions>();
    private readonly InputAction m_MovementSelection_placePoint;
    private readonly InputAction m_MovementSelection_cancel;
    public struct MovementSelectionActions
    {
        private @InputController m_Wrapper;
        public MovementSelectionActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @placePoint => m_Wrapper.m_MovementSelection_placePoint;
        public InputAction @cancel => m_Wrapper.m_MovementSelection_cancel;
        public InputActionMap Get() { return m_Wrapper.m_MovementSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementSelectionActions set) { return set.Get(); }
        public void AddCallbacks(IMovementSelectionActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementSelectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementSelectionActionsCallbackInterfaces.Add(instance);
            @placePoint.started += instance.OnPlacePoint;
            @placePoint.performed += instance.OnPlacePoint;
            @placePoint.canceled += instance.OnPlacePoint;
            @cancel.started += instance.OnCancel;
            @cancel.performed += instance.OnCancel;
            @cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IMovementSelectionActions instance)
        {
            @placePoint.started -= instance.OnPlacePoint;
            @placePoint.performed -= instance.OnPlacePoint;
            @placePoint.canceled -= instance.OnPlacePoint;
            @cancel.started -= instance.OnCancel;
            @cancel.performed -= instance.OnCancel;
            @cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IMovementSelectionActions instance)
        {
            if (m_Wrapper.m_MovementSelectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementSelectionActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementSelectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementSelectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementSelectionActions @MovementSelection => new MovementSelectionActions(this);
    public interface IGeneralActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IUnitSelectionActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnAdd(InputAction.CallbackContext context);
        void OnRemove(InputAction.CallbackContext context);
    }
    public interface IMovementSelectionActions
    {
        void OnPlacePoint(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
