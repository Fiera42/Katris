//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/input_control/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""MovementSelection"",
            ""id"": ""b587f8ae-80d1-4487-b90f-99d6968a2c7e"",
            ""actions"": [
                {
                    ""name"": ""placePoint"",
                    ""type"": ""Button"",
                    ""id"": ""1242725f-34e3-49ed-869f-aed9fa9088ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cancel"",
                    ""type"": ""Button"",
                    ""id"": ""4c40d480-7ef7-4b1a-a5ea-af888e19094d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""1ad44262-b94e-48b1-aa6d-538fd1ce467b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46a1de04-9694-475f-9c73-7c47d73d4dbe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(pressPoint=0.01),SlowTap(duration=0.3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""placePoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e055893-2dd5-478e-94d6-91721afba45c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8824b5f2-4096-4c59-88ec-ca13f75d5f18"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementSelection
        m_MovementSelection = asset.FindActionMap("MovementSelection", throwIfNotFound: true);
        m_MovementSelection_placePoint = m_MovementSelection.FindAction("placePoint", throwIfNotFound: true);
        m_MovementSelection_cancel = m_MovementSelection.FindAction("cancel", throwIfNotFound: true);
        m_MovementSelection_mousePosition = m_MovementSelection.FindAction("mousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementSelection
    private readonly InputActionMap m_MovementSelection;
    private List<IMovementSelectionActions> m_MovementSelectionActionsCallbackInterfaces = new List<IMovementSelectionActions>();
    private readonly InputAction m_MovementSelection_placePoint;
    private readonly InputAction m_MovementSelection_cancel;
    private readonly InputAction m_MovementSelection_mousePosition;
    public struct MovementSelectionActions
    {
        private @InputController m_Wrapper;
        public MovementSelectionActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @placePoint => m_Wrapper.m_MovementSelection_placePoint;
        public InputAction @cancel => m_Wrapper.m_MovementSelection_cancel;
        public InputAction @mousePosition => m_Wrapper.m_MovementSelection_mousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MovementSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementSelectionActions set) { return set.Get(); }
        public void AddCallbacks(IMovementSelectionActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementSelectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementSelectionActionsCallbackInterfaces.Add(instance);
            @placePoint.started += instance.OnPlacePoint;
            @placePoint.performed += instance.OnPlacePoint;
            @placePoint.canceled += instance.OnPlacePoint;
            @cancel.started += instance.OnCancel;
            @cancel.performed += instance.OnCancel;
            @cancel.canceled += instance.OnCancel;
            @mousePosition.started += instance.OnMousePosition;
            @mousePosition.performed += instance.OnMousePosition;
            @mousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IMovementSelectionActions instance)
        {
            @placePoint.started -= instance.OnPlacePoint;
            @placePoint.performed -= instance.OnPlacePoint;
            @placePoint.canceled -= instance.OnPlacePoint;
            @cancel.started -= instance.OnCancel;
            @cancel.performed -= instance.OnCancel;
            @cancel.canceled -= instance.OnCancel;
            @mousePosition.started -= instance.OnMousePosition;
            @mousePosition.performed -= instance.OnMousePosition;
            @mousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IMovementSelectionActions instance)
        {
            if (m_Wrapper.m_MovementSelectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementSelectionActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementSelectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementSelectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementSelectionActions @MovementSelection => new MovementSelectionActions(this);
    public interface IMovementSelectionActions
    {
        void OnPlacePoint(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
